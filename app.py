import streamlit as st
import os
import sqlite3
from datetime import datetime

# ‚úÖ Cr√©er le dossier s'il n'existe pas
os.makedirs("uploaded_docs", exist_ok=True)

st.title("üìö Assistant Documentaire - Projet RAG")

# Choix du framework
framework = st.radio("Choisir le moteur d'indexation :", ["LangChain", "LlamaIndex"])

# üì¶ Import dynamique du module selon le choix
if framework == "LangChain":
    import rag_langchain as rag
else:
    import rag_llamaindex as rag

# Choix de la langue de r√©ponse
langue = st.selectbox("Langue de la r√©ponse :", ["Fran√ßais", "Anglais", "Espagnol", "Japonais"])

# Nombre de documents √† r√©cup√©rer (top_k)
top_k = st.slider("Nombre de documents similaires √† r√©cup√©rer :", min_value=1, max_value=10, value=5)

# Connexion SQLite
conn = sqlite3.connect("feedback.db")
c = conn.cursor()
c.execute("CREATE TABLE IF NOT EXISTS feedbacks (timestamp TEXT, question TEXT, response TEXT, feedback TEXT)")

@st.cache_data
def cached_store(path, name):
    rag.store_pdf_file(path, name)

# üì• Upload PDF
uploaded_file = st.file_uploader("D√©poser un fichier PDF", type=["pdf"])

if uploaded_file is not None:
    file_path = os.path.join("uploaded_docs", uploaded_file.name)
    with open(file_path, "wb") as f:
        f.write(uploaded_file.read())

    st.success(f"‚úÖ Fichier {uploaded_file.name} charg√© avec succ√®s !")

    # Indexation avec gestion d'erreur
    st.write("üì• Indexation en cours...")
    try:
        cached_store(file_path, uploaded_file.name)
        st.success("Indexation r√©ussie.")
    except Exception as e:
        st.error(f"Erreur d‚Äôindexation : {e}")

# üí¨ Question utilisateur
question = st.text_input("Posez votre question sur le document :")

# Mapping des instructions de langue
langue_map = {
    "Fran√ßais": "R√©ponds en fran√ßais.",
    "Anglais": "Respond in English.",
    "Espagnol": "Responde en espa√±ol.",
    "Japonais": "Êó•Êú¨Ë™û„ÅßÁ≠î„Åà„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
}

response = ""

if question:
    with st.spinner("Recherche de la r√©ponse..."):
        full_question = langue_map.get(langue, "") + "\n" + question
        try:
            response = rag.answer_question(full_question)
        except Exception as e:
            st.error(f"Erreur pendant la g√©n√©ration de r√©ponse : {e}")
        else:
            st.markdown("### R√©ponse :")
            st.write(response)

# ‚úÖ Feedback utilisateur
st.markdown("### Votre avis sur la r√©ponse :")
feedback = st.radio("Cette r√©ponse √©tait-elle utile ?", ["Oui", "Non"], horizontal=True)

if feedback and question and response:
    timestamp = datetime.now().isoformat()
    c.execute("INSERT INTO feedbacks VALUES (?, ?, ?, ?)",
              (timestamp, question, response, feedback))
    conn.commit()
    st.success("Merci pour votre retour !")

conn.close()
st.markdown("---")
st.caption("Projet MAG 3 ‚Äî Hands-on RAG ‚Äî Larak01")
